name: Issue Validator

on:
  issues:
    types: [opened, edited]

jobs:
  validate-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Validate Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get issue data
            const issue = context.payload.issue;
            const issueNumber = issue.number;
            const issueBody = issue.body || '';
            const issueTitle = issue.title || '';
            const issueLabels = issue.labels.map(label => label.name);
            const issueCreatedAt = new Date(issue.created_at);
            
            // Optional: Skip issues created before the deployment date
            const deploymentDate = new Date('2025-05-13'); // Set to tomorrow or whenever you deploy
            if (issueCreatedAt < deploymentDate) {
              console.log(`Skipping issue #${issueNumber} as it was created before deployment`);
              return;
            }
            
            // Determine template type based on title prefix
            let templateType = '';
            if (issueTitle.startsWith('[BUG]')) {
              templateType = 'bug_report';
            } else if (issueTitle.startsWith('[FR]')) {
              templateType = 'feature_request';
            } else {
              console.log('Not a templated issue or unknown template');
              return;
            }
            
            // Read the template file
            const templatePath = `.github/ISSUE_TEMPLATE/${templateType}.md`;
            let templateContent;
            try {
              templateContent = fs.readFileSync(templatePath, 'utf8');
            } catch (error) {
              console.log(`Error reading template: ${error}`);
              return;
            }
            
            // Extract required sections from template
            const sectionRegex = /^#+\s+(.+?)$|^<!--\s+(.+?)\s+-->/gm;
            const checkboxRegex = /- \[ \] (.+)$/gm;
            
            const requiredSections = [];
            let match;
            
            // Extract sections (headers that start with ##)
            while ((match = sectionRegex.exec(templateContent)) !== null) {
              const sectionName = match[1] || match[2];
              if (sectionName && !sectionName.includes('Additional context')) {
                requiredSections.push(sectionName.trim());
              }
            }
            
            // Add checkbox items
            while ((match = checkboxRegex.exec(templateContent)) !== null) {
              requiredSections.push(match[1].trim());
            }
            
            // Validate the issue content
            const missingFields = [];
            const score = {
              total: requiredSections.length,
              filled: 0
            };
            
            for (const section of requiredSections) {
              // For checkboxes, look for checked version
              if (section.includes('I have reviewed')) {
                if (!issueBody.includes(`- [x] ${section}`)) {
                  missingFields.push(`- [ ] ${section}`);
                } else {
                  score.filled++;
                }
                continue;
              }
              
              // For regular sections, check if they have content
              const sectionRegex = new RegExp(`## ${section}\\s*([^#]+)`, 'i');
              const sectionMatch = issueBody.match(sectionRegex);
              
              if (!sectionMatch || !sectionMatch[1].trim()) {
                missingFields.push(`## ${section}`);
              } else {
                score.filled++;
              }
            }
            
            // Calculate score as percentage
            const scorePercentage = Math.round((score.filled / score.total) * 100);
            
            // Format the comment
            let comment = '';
            let addIncompleteLabel = false;
            
            if (missingFields.length > 0) {
              comment = `### Issue Validation: Incomplete (${scorePercentage}% complete)\n\n`;
              comment += `This issue is missing the following required information:\n\n`;
              comment += missingFields.map(field => `- \`${field}\``).join('\n');
              comment += `\n\n@${issue.user.login} Please edit your issue to include all required information.`;
              addIncompleteLabel = true;
            } else {
              comment = `### Issue Validation: âœ… Passed (100% complete)`;
            }
            
            // Check if we already have a validation comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
            });
            
            const botComment = comments.data.find(c => 
              c.user.type === 'Bot' && 
              c.body.includes('Issue Validation:')
            );
            
            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: comment
              });
            }
            
            // Manage incomplete label
            const hasIncompleteLabel = issueLabels.includes('incomplete');
            
            if (addIncompleteLabel && !hasIncompleteLabel) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: ['incomplete']
              });
            } else if (!addIncompleteLabel && hasIncompleteLabel) {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                name: 'incomplete'
              });
            }
